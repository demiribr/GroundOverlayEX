Defines javascript classes:  GroundOverlayEx, GroundOverlayEX_mgr, LatLngQuad, ZoomArray, ZoomEntryZoom, ZoomEntryAlt_ft, ZoomEntryAlt_m
Classes are extended from google.maps.OverlayView (GroundOverlayEx) and google.maps.MVCObject (all the rest)
Libraries needed:  (javascript) Google Maps API V3, Numeric.js
Version 1.2
Attribution: Mike Maschino, Google Maps API
License: MIT License (see License.txt file)

Concepts of Operation:
1.  The GroundOverlayEX class can be used "stand-alone" alongside other Google Maps features, including 
    regular GroundOverlay objects.  A minimal set of constructor information to a GroundOverlayEX object will 
    display the image like any other GroundOverlay, but also providing cropping, rotation, and/or non-rectangular 
    transforms that the regular GroundOverlay class cannot provide.
2.  To gain functionality more like Google Earth, numerous GroundOverlayEx objects can be instanciated and placed
    under the management of a GroundOverlayEX_mgr object.  The manager will dynamically display or not display
    images from the GOEXs it manages based upon the current map viewport latitudes and longitudes.  Thus hundreds
    or thousands of GOEXs could be defined and loaded into the manager, but the map and the browser will only need to
    handle a limited number of images that should be presently showing given the map position and zoom.  The manager
    is particular needed for handling a huge quantities of GOEXs, or for handling a large quantity of very large 
    high-resolution images.  When under management, the GOEXs that are actively displaying are participating in 
    the Google Maps environment.
    
Data types used:  all the google.maps data types (e.g. LatLng, LatLngBounds)
New data types:	  LatLngQuad, zoomArray, zoomEntryZoom, zoomEntryAlt_ft, zoomEntryAlt_m

It is strongly suggested to understand the KML definition of GroundOverlay (plus Google's extensions);
this class provides nearly all the capabilities as the KML GroundOverlay object
https://developers.google.com/kml/documentation/kmlreference#groundoverlay

================
LatLngQuad class
================
A LatLngQuad constructs a non-rectangular convex quadrilateral in geographical coordinates for tilt distorted 
ground overlay images.  It defines the geographical coordinates of the original four corners of an image in 
a specific order:  Bottom-Left, Bottom-Right, Top-Right, and Top-Left.  Note that for example Bottom-Left does not
correspond to South-West; the geographic coordinates may rotate, resize, and non-rectangularly distort the image.

Extends from class: google.maps.MVCObject	
Constructor:					Returns			  Description
------------					-------			  -----------
LatLngQuad(google.maps.LatLng_Bottom_Left, 
           google.maps.LatLng_Bottom_Right, 
           google.maps.LatLng_Top_Right, 
           google.maps.LatLng_Top_Left)         Object			  Constructor

Methods:
--------
.destroy()                                      none                      release all internally stored objects
.isEmpty()                                      Boolean                   true=the object had a properly passed parameters
.getBottomLeft()                                google.maps.LatLng        returns what was passed in the constructor
.getBottomRight()                               google.maps.LatLng        returns what was passed in the constructor
.getTopRight()                                  google.maps.LatLng        returns what was passed in the constructor
.getTopLeft()                                   google.maps.LatLng        returns what was passed in the constructor
.getNorthMost()                                 Number                    returns the northmost latitude from all four corners; this is the maximum of the latitudes
.getSouthMost()                                 Number                    returns the southmost latitude from all four corners; this is the minimum of the latitudes
.getEastMost()                                  Number                    returns the eastmost longitude from all four corners; this is the maximum of the longitudes
.getWestMost()                                  Number                    returns the westmost longitude from all four corners; this is the minimum of the longitudes
.getBoundsBox()                                 google.maps.LatLngBounds  returns a bounds composed of the {southmost,westmost} and the {northmost,eastmost}
.toSpan()                                       google.maps.LatLng        returns the linear size in geographic coordinates of the BoundsBox
.getPosition()					google.maps.LatLng	  returns the center of the BoundsBox
.inBoundsBox(google.maps.LatLng)                Boolean                   true=the passed LatLng is inside the BoundsBox (suitable only for Region checking)
.toString()                                     String                    returns a human-readable string of the four corner geographic coordinates in constructor order
.toUrlValue(Number:precision)                   String                    returns a sequence of eight comma-delimited values of the latitudes and longitudes of the corners in constructor order; precision if specified will limit the factional portion to only the indicated number of digits

Code Example:
-------------
var bl = new google.maps.LatLng(..., ...);
var br = new google.maps.LatLng(..., ...);
var tr = new google.maps.LatLng(..., ...);
var tl = new google.maps.LatLng(..., ...);
var llq = new google.maps.LatLngQuad(bl, br, tr, tl);


===============
zoomArray class
===============
This class stores a series of zoom ranges with corresponding image URL to display.  Alternatively, Google Earth camera viewpoint altitudes in either feet or meters above
sea level can specified.  Although these types of entries can be intermixed, this is not recommended.  whichever entry that first matches the Google Maps V3 zoom level
will be selected; other possibly relevent entries will be ignored.

Extends from class: google.maps.MVCObject	
Constructor:					Returns			Description
------------					-------			-----------
ZoomArray();					Object			Constructor

Methods:
--------
.destroy()					none			release all internally stored objects
.length()					Number			returns quantity of entries that have been added
.addZoomEntry(zoomEntry*:entryToAdd)		none			add a new zoomEntry* to the end of the array
.prependZoomEntry(zoomEntry*:entryToInsert)	none			add a new zoomEntry* to the beginning of the array
.getUrl(Number:indexNo)				String			returns the URL of the passed index number
.whichIndexPerUrl(String:Url)			Number			returns the index number of which first entry has the specified URL; -1=no such entry found
.whichIndexPerZoom(Number:zoom)			Number			returns the index number of which first entry is applicable for the specified zoom level number; -1=no such entry found

==================
zoomEntry* classes
==================
This class specifies a range of zoom levels or altitudes with an image URL.

Extends from class: google.maps.MVCObject
Constructors:												Returns
-------------												-------
zoomEntryZoom(Number:lowerZoom, Number:higherZoom, String:imageURL)					Object
zoomEntryAlt_ft(Number:lowerAltitude_feet, Number:higherAltitude_feet, String:imageURL)			Object
zoomEntryAlt_m(Number:lowerAltitude_meters, Number:higherAltitude_meters, String:imageURL)		Object

Methods:
--------
none externally available

Code Example:
-------------
var za = new ZoomArray();
var ze1 = new ZoomEntryZoom(0, 8, "http://somewhere.com/image1.jpg");
za.addZoomEntry(ze1);
var ze2 = new ZoomEntryZoom(9, 22, "http://somewhere.com/image1_highrez.jpg");
za.addZoomEntry(ze2);


=====================
GroundOverlayEX class
=====================
This class displays a rectangular (with rotation) or non-rectangular image overlay on the map.  The image can also be pre-cropped.  This GroundOverlay class implements
most of the capabilities of a KML-defined GroundOverlay.  However, level-of-detail works differently, and this GroundOverlayEx class can manage multiple versions of 
the same image at different proportional sizes and resolutions.

Extends from class: google.maps.OverlayView
Constructor:						Returns
------------						-------
GroundOverlayEX(String:url, 
		google.maps.LatLngBounds:boundsBox, 
		Object:GroundOverlayEX_options)		Object

Passed Parameter Notes:
-----------------------
  url:  should always be passed even if is one of the URLs in a ZoomArray; if cropping, then this should be the URL for the image which the cropping parameters apply to
  boundsBox:  for a LatLngBounds-mode ground overlay, a LatLngBounds must be provided; for a LatLngQuad-mode ground overlay, this should be null ... if both a LatLngQuad and a LatLngBounds are provided, the LatLngBounds will be ignored
  
GroundOverlayEX_options:			Default	Description
------------------------			-------	-----------
  clickable: Boolean,				false	true=pass-thru various click and mouse events for the application to listen to
  clickableAtZoom: Number,			0	specifies at which zoom level or higher that clickable events start to be listened for
  clickableEvents: String,			"all"	specifies which events are wanted: "all","click","dblclick","rightclick","mouseover","mouseout","mousedown","mouseup"
  map: google.maps.Map,				null	auto-loads the google.maps.MAP; if not specified then the application must invoke the .setMap() method prior to using the GroundOverlayEX object
  opacity: Number,				1	number ranging from zero (transparent) to one (fully opaque) to be applied to the displayed image
  rotate: Number,				0	specifies the rotation to be applied to the image only in latlngBounds mode; ignored if a LatLngQuad is specified; degrees counter-clockwise
  origImgWidth: Number,				0	if specified, this must be the original image width on which the crop values below are based; see cropping end event notes below
  origImgHeight: Number,			0	if specified, this must be the original image height on which the crop values below are based; see cropping and event notes below
  cropFromLeft: Number,				0	if specified, first crop the image from the left the number of indicated pixels; see cropping notes below
  cropToWidth: Number,				0	if specified, second crop the resultant width to the indicated pixels; see cropping notes below
  cropFromBottom: Number,			0	if specified, first crop the image from the bottom the number of indicated pixels; see cropping notes below
  cropToHeight: Number,				0	if specified, second crop the resultant height to the indicated pixels; see cropping notes below
  latlngQuad: LatLngQuad,			null	specifies the LatLngQuad to use to display the GroundOverlayEX images; overrides any latlngBox passed parameter
  id: String,					""	optional application-defined identity string for the GroundOverlayEX object; only used by the application
  displayText: String,				""	optional string of information associated with the groundoverlay; can be used for a google.maps.InfoWindow; only used by the application
  zoomArray: ZoomArray,				null	specifies a set of image URLs to display at different map zoom levels; if not specified then the url passed parameter will be used at all zoom levels
  regionBounds: google.maps.LatLngBounds,	null	specifies a region bounds if which is visible in any portion on the map viewport, the GroundOverlayEX will load the proper image for the zoom and display it
  drawOrder: Number,				0	specifies a layered drawing order number in cases where ground overlay images overlap; if not specified then zero is used
  zIndexBase: Number,				1000	the drawOrder is added to this zIndexBase for layering in the browser; if not specified then a default zIndexBase is used
  zIndex: Number				0	a specific zIndex to use instead of zIndexBase+drawOrder; if specified then the other two are ignored

Extended Properties:		Returns				Description
-----------			-------				-----------
.position			LatLng				a fast and approximate center LatLng suitable for InfoWindows or other Google Map uses

Standard Methods:
-----------------						
.getBounds()			google.maps.LatLngBounds	returns the current LatLngBounds for the image; null=none available
.getMap()			google.maps.Map			(see the Google Maps API V3 definitions for a GroundOverlay)
.getUrl()			String				returns the url passed parameter (and not any of the zoomArray URLs)
.setMap(google.maps.Map:map)	none				note: this MUST be set before the GroundOverlayEX object will perform any actions
.getOpacity()			Number				(see the Google Maps API V3 definitions for a GroundOverlay)
.setOpacity(Number:opacity)	none				(see the Google Maps API V3 definitions for a GroundOverlay)

Map Framework methods:
----------------------						
.onAdd()			none				(see the Google Maps API V3 definitions for an OverlayView)
.draw()				none				ditto
.onRemove()			none				ditto
.getProjection()		google.maps.MapCanvasProjection ditto
.getPanes()			google.maps.MapPanes		ditto

Extended Methods:
-----------------
.getVersion()			String				returns the version code of the GroundOverlayEX class
.destroy()			none				completely destroy the object's internal data; object cannot be re-activated using .setMap(map)
.getId()			String				gets the application-defined id for the Object; the Object only uses this to display any errors on the console log
.getDisplayText()		String				gets the application-defined string for the Object; the Object does not use this string at all
.setDisplayText(String:text)	none				sets the application-defined string for the Object; the Object does not use this string at all
.getPosition()			google.maps.LatLng		returns a fast and approximate center LatLng suitable for InfoWindows or other Google Map uses
.getOverCropped()		Boolean				returns true=cropping parameters are too large and likely made image invisible; false=image is properly cropped or there was no cropping specified
.getDisplayMode()		String				returns which geographic coordinates are being used: 'B'=LatLngBounds, 'Q'=LatLngQuad
.getBoundsOriginal()		google.maps.LatLngBounds	returns the LatLngBounds which was passed in the constructor; could be null
.getLatLngType()		String				returns whether the LatLngQuad appears to be rectangular or non-rectangular: 'R'=rectangular, 'N'=non-rectangular, 'u'=known or not using LatLngQuad
.getLatLngQuad()		LatLngQuad			returns the current LatLngQuad for the image; null=none available
.getLatLngQuadOriginal()	LatLngQuad			returns the LatLngQuad which was passed in the constructor; could be null
.getRegionBounds()		google.maps.LatLngBounds	returns the LatLngQuad for the region bounds in-use by the GroundOverlayEX; could be the region provided in the constructor; or if not provided then it will have been computed by the GroundOverlayEX class
.getRotation()			Number				returns the rotation applied to the image only in latlngBounds mode
.getDrawOrder()			Number				returns the current draw order value
.setDrawOrder(Number:drawOrder)	none				sets a draw order value, and image will change zIndex order; must be >= 0
.getZindexBase()		Number				returns the application defined zIndexBase; 0=none set and the internal default is being used
.setZindexBase(Number:zIndex)	none				set the application defined zIndexBase, and image will change zIndex order; must be > 0; 0 = use default
.getZindex()			Number				get the override zIndex value; if > 0 then drawOrder and ZindexBase are ignored
.setZindex(Number:zIndex)	none				set the override zIndex value, and image will change zIndex order; if > 0 then drawOrder and ZindexBase are ignored
.getEffectiveZindex()		Number				returns the zIndex in-use by the GroundOverlayEX object regardless of how it was calculated


Display Mode Notes:
-------------------
Just like the KML defintion of a GroundOverlay, there are two possible display modes in the GroundOverlayEX.  Only one may be active.  If information is provided
in the constructor for both a LatLngQuad and a LatLngBounds, the LatLngBounds and rotation will be ignored.
Mode		.displayMode() value	Description
----		--------------------	-----------
LatLngBounds	B			A rectangle where the top-right of the image gets placed by the north-east bound, and the bottom-left of the image
					gets placed by the south-west bound.  That placement may resize the images width and height, even non-proportionally.
					Finally the image may optionally be rotated about its center.
LatLngQuad	Q			Latitude,Longitude pairs for each of the four corners of the image.  These pairs can resize, rotate, skew, and
					transform the image into non-rectangular shapes (suitable for correcting tilt distortion in the image).  The order of
					the pairs must be for the following corners in order:  Bottom-left, Bottom-right, Top-right, Top-left


Internal Order-of-Operation Notes:
----------------------------------
A GroundOverlayEX object passes through various stages and states depending on where it is placed in relation to the currently viewed map viewport
	1.  GroundOverlayEX Object is constructed; missing information such as RegionBounds is automatically created
	2.  The Object is added to the Google Map
	3.  The Object assesses whether its RegionBounds is viewable:
		if not, then the Object waits until it is visible
	4.  The Object assesses the current map zoom level, and chooses the appropriate image
	5.  If the needed image is not yet loaded, the Object initiates download of the image then waits
	6.  The now-downloaded image is cropped if supposed to be
	7.  If in LatLngBounds mode, the image is rotated; if in LatLngQuad mode, the image is transformed
	8.  The image is added to the Google Map and now gets displayed
	9.  The Object waits and listens to the map
	10. If the map viewport changes for any reason, the Object assesses whether its RegionBounds are still in display view:
		If out-of-view, the image is removed from the Google Map but remains loaded, then go to step 9 and wait
		if in-view, the Object assesses whether the zoom level changed or not:
			if zoom is the same, then nothing need be done; go to step 9 and wait
			if zoom has changed, then go to step 4 above
This order of operation helps reduce burden on the Google Map when hundreds or thousands of GroundOverlayEX objects are instanciated.  Only those images that
actively need display are placed into the map's management.  If the GroundOverlayEX Object has images that are loaded but not-displayed, after a period of
time of non-display the Object will also unload the images, which reduces memory and burden on the browser.  These features are provided to ensure the
Google Map remains quick and responsive for the average end-user on an average (non-mobile) computer.  

The application developer has the option to widen the passed RegionBounds such that it is larger than the image's natural LatLngBounds or 
LatLngQuad's BoundingBox.  THis will have the effect of pre-loading and pre-displaying images that are very near to the viewport and very likely to be 
displayed soon by the end-user.  Use of the optional GroundOverlayEX_mgr class can provide a more effective means to accomplish that for a large number
of GroundOverlayEX objects.


ZoomArray instead of Level-of-Detail
------------------------------------
The KML specification forces the creation of many times the quantity of GroundOverlay objects when there are several available resolutions of the same image, and
uses a Level-of-Detail upper and lower limit to choose which to show and which to hide.  Rather than over-burdening Google Maps on the browser with this, the 
GroundOverlayEX uses an alternate method to accomplish this more effectively for Google Maps.  A ZoomArray is a simple structure that allows the application
developer to associate an image's per-resolution URL with a range of Google Maps zoom levels.  A trivial example is:

Code Example:
	var za = new ZoomArray();
	var ze1 = new ZoomEntryZoom(0, 8, "http://somewhere.com/image1.jpg");
	za.addZoomEntry(ze1);
	var ze2 = new ZoomEntryZoom(9, 22, "http://somewhere.com/image1_highrez.jpg");
	za.addZoomEntry(ze2);
	var goex = new GroundOverlayEX("http://somewhere.com/image1_highrez.jpg", bnds, { zoomArray: za, map: map });

This allows just one GroundOVerlayEX object to manage all the per-resolution image URLs, instead of two or three or more objects just to show the same image at different
resolutions.  The cropping parameters (if specified) will be applied proportionally to all other resolutions (see the cropping notes below).

Note that each image URL placed into the ZoomArray must be the same image, just a smaller or larger proportional version in terms of size and resolution.  If the imagery
is of entirely larger or smaller regions at different resolution levels (a typical case for image tiling), then multiple GroundOverayEX objects would still have to be used.
Indeed, use of GroundOverlay or GroundOverlayEX are not recommended for image tiling. 

If the application's data has "camera"/"point-of-view" altitude data instead, there are ZoomEntryAlt_ft and ZoomEntryAlt_m available as well that will compute the 
zoom levels based upon passed point-of-view altitude ranges.

When using a ZoomArray, it is strongly recommended to pass the "OrigImgWidth" and "OrigImgHeight" values in the configuration options, especially when using either
Cropping or listening to events.  The "OrigImgWidth" and "OrigImgHeight" must be for the image passed in the url parameter, and is the context that will be used for
event generation and cropping.


Cropping Notes:
---------------
Image pre-cropping is done in a similar manner as the Icon <gx:x>,<gx:y>,<gx:w>,<gx:h> subfields in the KML specification.  Note the KML defines an image origin 
as the *Bottom-Left* of the image; browsers use the Top-Left.  Hence the crop parameters for horizontal are defined as "cropFromBottom" and "cropToHeight".

The two additional yet optional passed cropping parameters "cropOrigImgWidth" and "cropOrigImgHeight" are available to help reduce broswer computing load in 
certain circumstances.  The code snippet below shows the scenario where this is useful:

Code Example:
	(assume variables 'map' and 'bnds' have been properly defined, that the map is currently at zoom level 5, 
	 that image1.jpg is 512x512, and image1_highrez.jpg is 512000x512000)

	var za = new ZoomArray();
	var ze1 = new ZoomEntryZoom(0, 8, "http://somewhere.com/image1.jpg");
	za.addZoomEntry(ze1);
	var ze2 = new ZoomEntryZoom(9, 22, "http://somewhere.com/image1_highrez.jpg");
	za.addZoomEntry(ze2);
	var goex = new GroundOverlayEX("http://somewhere.com/image1_highrez.jpg", bnds, { zoomArray: za, map: map, cropFromLeft: 100000 });


Following the Internal Order-of-Operation, step 4 chooses the much smaller "http://somewhere.com/image1.jpg".  However, at step 6, the passed crop 
parameters are for the much larger "http://somewhere.com/image1_highrez.jpg".  But the GroundOverlayEX object does not yet know that larger image's width and 
height, and cannot therefore proportionally adjust the crop parameter down to the smaller image's size.  The GroundOverlayEX object is forced to download BOTH 
images (and wait till BOTH get completely downloaded), then it has sufficient information about the larger image to crop the smaller image.  Although this is 
not a big deal for one individual GroundOverlayEX object, if there are hundreds or thousands then alot of extra downloading and wasted time is spent, when the 
Object was designed to attempt to minimize that.

So for optimal performance, when using both a ZoomArray and Cropping for a GroundOverlayEX object, it is optimal to also provide the "cropOrigImgWidth" and "cropOrigImgHeight".
Alot less image downloads will occur.  If a GroundOverlayEX object is cropping but will not be using a ZoomArray, providing or not providing those two parameters 
does not impact performance either way.


RegionBounds and GroundOverlayEX_mgr Notes:
-------------------------------------------
As indicated above, RegionBOunds is used in step 3 and step 10 of the Internal Order-of-Operation.  Since this bounds is very important to the Object, if it is 
not passed in the constructor, then the Object computes it as follows:

Mode		.displayMode() value	If RegionBounds was not provided:
----		--------------------	---------------------------------
LatLngBounds	B			RegionBounds is set equal to passed parameter LatLngBounds
LatLngQuad	Q			RegionBounds is set equal to passed parameter LatLngQuad.getBoundsBox()

The default computation of the region ensures that the moment it becomes visible on the map viewport, the proper image is indeed loaded and displayed.  However,
this could cause pauses when zooming and panning as especially large images from slow servers are downloaded.  The application developer should choose to pass
an expanded RegionBounds than those defaults above.  Doing so would cause images that are near to the viewport to be pre-download and pre-displayed even 
though still off-screen.  This could of-course impact performance, so use that option with care.

As has been mentioned (and will be detailed below), an optional GroundOverlayEX_mgr class is available.  This class allows the application developer to place
all the GroundOverlayEX objects into the manager object.  One task of the manager object is to add and remove the GroundOverlayEX objects from the map framework
itself, which is useful when one may have thousands of defined GroundOverlayEX objects, yet do not want to over-burden the map framework with so many 
feature objects.  A portion of that functionality is to also evaluate which GroundOverlayEX objects are *near* the viewport, yet are off-screen, but should be 
pre-added to the map and pre-loaded to provide a smoother end-user experience.  Each GroundOverlayEX's RegionBounds are used in that evaluation, but against wider
viewport contexts.

The end result is that pre-loading can be achieved with the manager class without having to compute widened RegionBounds, and indeed the default internally 
computed RegionBounds can be used, but still have controlled pre-loading capabilities.


Events Notes:
-------------
The GroundOverlayEX class itself captures selected map events and events concerning its displayed image. 
However, the application developer can listen to events from the GroundOverlayEX object itself.  If the passed parameter "clickable" is set to true,
the object will pass-thru and trigger the following events when they occur (including the MouseEvent data).  Note the use of addListener instead of
addDomListener: the GroundOverlayEX object itself is not subject to DOM events (its not "drawn" onto the web page; just the internally stored images are "drawn" 
onto the web page).  The applicable GroundOverlayEx object is provided also as a second passed parameter, with additional four parameters of clicked on imageX
point, imageY point, latitude, longitude:
	
Available DOM Events:
	click, dblclick, rightclick, mouseover, mouseout, mousedown, mouseup

Code example:
	:
	var goex = new GroundOverlayEX( ..., ..., { ..., clickable: true});
	var listener = google.maps.event.addListener(goex, "rightclick", function(mouseEvent, theGoex) { ... });

The ImageX and imageY are expressed in values relative to the *cropped* size of the image passed in the url parameter (regardless of which actual image is presently 
being shown).  So like cropping, if a ZoomArray has been defined and if the application developer does not pass in the "OrigImgWidth" and "OrigImgHeight" values,
then the GroundOverlayEX object may be forced to also download the url passed parameter image file.  If ImageX and ImageY are returned as -1, then the
GroundOverlayEX could not calculate the proper values.  However, the mouseEvent class itself has various useful X,Y points:  screen, page, client, and layer. 
The mouseEvent.layerX and mouseEvent.layerY are the point-on-the-image, however for the size of the image currently shown via the ZoomArray.

There are some oddities about the DOM events.  
1. Double-clicking on an image will generate two "click" events then one "doubleclick" event.  This class passes them through as-is.
2. When dragging the map, if the mousedown is on a GroundOverlayEX image, a "click" event gets generated even though a drag should not count as a click.
   The GroundOverlayEX detects this and will not generate a "click" event if the reason for the mousedown & mouseup was to drag the map.
3. The Google Maps framework does not appear to actually pass-through "rightclick" actions on the GroundOverlayEX's images; the class however needs to
   detect shift-rightclicks, and will as a courtesy generate a "rightclick" event.

If there are hundreds or thousands of GroundOverlayEX objects, and say the map zoom level is at 0 or 1 such that ALL of the overlays are being shown,
that is alot of handlers the map framework has to deal with.  Usually at lower zoom levels, one really does not want to show popups or click-for-infoWindow.
So the "clickableAtZoom" and "clickableEvents" constructor options all the developer to minimize the listeners to 1) those only needed, and 2) to only when
they are applicable at a minimum zoom level.

Using the GroundOverlayEX_mgr class also helps reduce the number of listeners that the map framework must deal with.  See the Events Notes section of that 
class for more information.


=========================
GroundOverlayEX_mgr class
=========================
This class functions as a high level manager for a large quantity of GroundOverlayEX objects.  The manager only places those GroundOverlayEX objects onto the
Google Map framework that are nearby or within the current map viewport.  It can also do mass changes to all GroundOverlayEX objects that it is managing, such
as changing the Opacity of all the GroundOverlayEX object.

Extends from class: google.maps.MVCObject
Constructor:									Returns
------------									-------
GroundOverlayEX_mgr(google.maps.Map:map, GroundOverlayEX_mgr_options)		Object

Passed Parameter Notes:
-----------------------
  map:  google.maps.Map to be used for all the managed GroundOverlayEXs
  
GroundOverlayEX_mgr_options:		Default	Description
----------------------------		-------	-----------
  placementRegion: String,		zoom2x	see notes below on expanded region bounds; acceptable values: zoom2x
  preloadRegion: Number			0	see notes below on expanded region bounds; acceptable values: 0=off to 1=placementRegion

Methods:				Returns			Description
--------				-------			-----------
.getVersion()				String			returns the version code of the GroundOverlayEX_mgr class
.getMap()				google.maps.Map		(see the Google Maps API V3 definitions for a GroundOverlay)
.addGOEX(GroundOverlayEX)		Boolean			add a GOEX to manage; true=add was successful; currently the only reason for rejection is that the GroundOverlayEX does not have a RegionBounds defined or calculated
.startOfBulkload()			none			indicates the start of a bulk load process of many GOEXs
.addGOEXbulkload(GroundOverlayEX)	Boolean			one of a large bulk to GOEXs being added; when bulk loading, PreloadRegion is ignored until [.endOfBulkload() is called to help reduce simultaneous download of imagery]
.endOfBulkload()			none			indicates the end of bulk loading
.setAllOpacity(Number)			none			changes the opacity of every GroundOverlayEX object being managed
.getPlacementRegion)			String			see notes below on expanded region bounds; acceptable values: zoom2x
.setPlacementRegion(String)		none			see notes below on expanded region bounds; acceptable values: zoom2x
.getPreloadRegion()			Number			see notes below on expanded region bounds; acceptable values: 0=off to 1=zoom2x
.setPreloadRegion(Number)		none			see notes below on expanded region bounds; acceptable values: 0=off to 1=zoom2x
.getAllQtys()				Array:Numbers		returns sums of quantities across all the GOEXs; may be useful during application debugging:
									[0]=qty GOEXs under management, [1]=qty GOEXs added to map, [2]=qty Event Listeners allocated,
									[3]=qty images loaded, [4]=sum loaded image pixel sizes (width * height), [5]=qty being displayed

Code example:
-------------
	var goexMgr = new GroundOverlayEX_mgr(map);
	:
	var goex = new GroundOverlayEX( ..., ..., { ...});
	var success = goexMgr.addGoex(goex);


Expanded RegionBounds Notes
---------------------------
The manager's primary function is to unload and load GroundOverlayEX's from the Google map.  This is really only necessary for large or huge numbers of 
GroundOverlayEX objects to keep the Google Maps framework from getting overloaded and unresponsive.  The manager does this by defining a "super viewport" 
based upon the map's currently displayed viewport.  All GroundOverlayEX objects with any portion of their RegionBounds inside this super viewport 
are loaded into the Google Map (meaning their .setMap(map) is called).  All other GroundOverlayEX objects are removed from the map (meaning a .setMap(null) 
is called).  That super viewport is called the "placementRegion".

The manager currently offers one definition for that placement region named "zoom2x".  The placement region is what would be showing on the map if the zoom 
was reduced one level (which in Google Maps means two times width and height of what is being shown).  So effectively the manager keeps within Google Maps
all those GroundOverlayEX objects that would be visible if the end-user zoomed out one level.

Each GroundOverlayEX object that IS loaded into the Google Map makes its own assessment of whether to load the proper image for the zoom and display it based upon 
its local decision about its RegionBounds and the current map viewport.  So normally, all those extra GroundOverlayEX objects that got loaded into the surrounding 
off-screen space remain idle and in particular do not attempt to pre-load their images.

Using the manager, the application developer can also activate the "preloadRegion".  This region is typically between the "placementRegion" and the current map 
viewport region.  All GroundOverlayEX objects that are inside the preloadRegion (but are not yet visible on the viewport) are instructed by the manager to preload 
their proper image for the zoom, but not yet display it.  Then when the end-user drags or pans the map, the GroundOverlayEX objects that suddenly come into view
already have downloaded their images, and instantaneously display them.

The preloadRegion is a value between 0 and 1.  0 means no preloadRegion.  1 means the preloadRegion is the same size as the placementRegion.  values in-between are
mid-points between the current map viewport size and the preloadRegion.  For example, .5 means the preloadRegion is half-way between the map viewport and the 
placementRegion; .25 means just quarter-way from the viewport to the placementRegion, etc.

If many GOEX's are loaded into the manager class simultaneously at the first initialization of a map, with a preloadRegion defined, some browsers (particularly
Firefox) get image download errors.  To help mitigate this problem with the browser, some recommendations:
1.  Start out at a mid-range zoom level or higher ... don't start out with zoom levels 0 to 5.
2.  Use the .startOfBulkload(), .addGOEXbulkload, and .endOfBulkload methods to bulk load at map initialization.  The preloadRegion will temporarily be 
	ignored, reducing the number of images initially downloaded in bulk.  It is recommended to even use a setTimeout() to call the .endOfBulkload() method
	after say 5 or so seconds to allow the visible images to download first.  See the code example below.

Events Notes:
-------------
In order to reduce load on the map framework when hundreds or thousands of GroundOverlayEX objects are being displayed at maximum zoomout, the GroundOverlayEX_mgr 
class can act as an aggregator for clickable events that happen from the GroundOverlayEX objects that it manages.  If managed GroundOverlayEX 
obects are set as "clickable: true" in their constructor (and optionally have their "clickableAtZoom" and "clickableEvents" also set), those objects also trigger events 
as the GroundOverlayEX_mgr object (*without* using Google Maps events listeners and triggers).  The application need only listen to  the manager, not all the individual
GroundOverlayEX objects, as also shown in the code example below.

Code example: cropping not shown in this example; show low-resolution image at zoom levels 0 thru 8
-------------
	:
	:
	var goexMgr = new GroundOverlayEX_mgr(map);
	google.maps.event.addListener(goexMgr, "dblclick", function(mouseEvt, theGOEX, imageX, imageY, lat, lon){ a_GOEX_was_doubleclicked(theGOEX, mouseEvt, imageX, imageY, lat, lon); });

	:
	: setup a database query and read out all necessary image and geolocation information into an array called rows,
	: we will assume the database has the following "columns":  id (record key), image URL hirez, image URL lorez, northBounds, southBounds, eastBounds, westBounds,
	:	rotation, drawOrder, bottomLeftLat, bottomLeftLng, bottomRightLat, bottomRightLng, topRightLat, topRightLng, topLeftLat, topLeftLng
	: must make sure all numeric "columns" contain zeros if no information (not blank)
	:
	goexMgr.startOfBulkload();
	var bounds,llQuad,GO_opts,goex,za;
	for (var i in rows) {
		if (rows[i][3] != 0 || rows[i][4] != 0 || rows[i][5] != 0 || rows[i][6] != 0) {
			neBound = new google.maps.LatLng(rows[i][3], rows[i][5]);
			swBound = new google.maps.LatLng(rows[i][4], rows[i][6]);
			bounds = new google.maps.LatLngBounds(swBound, neBound);
		} else bounds = null;
		if (rows[i][9] != 0 || rows[i][10] != 0 || rows[i][11] != 0 || rows[i][12] != 0 || rows[i][13] != 0 || rows[i][14] != 0 || rows[i][15] != 0 || rows[i][16] != 0) {
			blBound = new google.maps.LatLng(rows[i][9], rows[i][10]);
			brBound = new google.maps.LatLng(rows[i][11], rows[i][12]);
			trBound = new google.maps.LatLng(rows[i][13], rows[i][14]);
			tlBound = new google.maps.LatLng(rows[i][15], rows[i][16]);
			llQuad = new LatLngQuad(blBound, brBound, trBound, tlBound);
		} else llQuad = null;
		za = new ZoomArray();
		ze1 = new ZoomEntryZoom(0, 8, String(rows[i][2]));
		za.addZoomEntry(ze1);
		ze2 = new ZoomEntryZoom(9, 22, String(rows[i][1]));
		za.addZoomEntry(ze2);
		GO_opts = {
			id: String(rows[i][0]),
			clickable: true,
			clickableAtZoom: 4,
			clickableEvents: "dblclick",
			drawOrder: Number(rows[i][8]),
			rotation: Number(rows[i][7]),
			latlngQuad: llQuad,
			zoomArray: za
		}
		goex = new GroundOverlayEX(String(rows[i][1]), bounds, GO_opts);
		goexMgr.addGOEXbulkload(goex);
	}
	// wait 5 seconds after all that are actually visible are loaded and shown, then start preloading nearby off-screen images
	setTimeout( { goexMgr.endOfBulkload(); }, 5000);
	:
	:
}
function a_GOEX_was_doubleclicked(mouseEvent, thegoex) {
	// open an infoWindow on the GroundOverlayEX
	var infoWind = new google.maps.InfoWindow({ content: "An InfoWindow" });
	infoWind.open(map, thegoex);
}
